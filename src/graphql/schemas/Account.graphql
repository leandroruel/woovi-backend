# Type: GraphQL Schema
# A Date scalar type that represents a date in the format of "YYYY-MM-DD"
scalar Date

# Type: GraphQL Schema
# A ObjectID scalar type that represents a unique identifier
scalar ObjectID

# Type: GraphQL Schema
# Description: Account schema
type Account {
  "The idempotency ID."
  idempotencyId: UUID!
  "The account number."
  accountNumber: String!
  "The user ID."
  userId: ObjectID!
   "The user balance."
  balance: Float!
  "The account's created date."
  createdAt: Date!
  "The account's updated date."
  updatedAt: Date!
}

"Represents the response of a transfer amount."
type TransferAmountResponse {
  "The success status."
  success: Boolean!
  "The message."
  message: String!
  "The transaction Id."
  idempotencyId: String!
}

# Type: GraphQL Schema
# Description: Create account payload
input CreateAccountPayload {
  "The idempotency ID."
  idempotencyId: UUID!
  "The account number."
  accountNumber: String!
  "The user ID."
  userId: ObjectID!
  "The user balance."
  balance: Float!
}

# Type: GraphQL Schema
# Description: Update account payload
input UpdateAccountPayload {
  "The account number."
  accountNumber: String
  "The user balance."
  balance: Float
}

"Represents a transfer amount payload."
input TransferAmountPayload {
  "The sender ID."
  senderId: ObjectID!
  "The receiver ID."
  receiverId: ObjectID!
  "The amount to transfer."
  amount: Float!
  "The idempotency ID."
  idempotencyId: String!
}

type Query {
  "Get an account by its ID."
  account(id: ObjectID!): Account
  "Get all accounts."
  accounts: [Account!]
  "Get an account by its user ID."
  accountByUserId(userId: ObjectID!): Account
}

type Mutation {
  "Create an account."
  createAccount(account: CreateAccountPayload!): Account
  "Update an account."
  updateAccount(account: UpdateAccountPayload!, userId: ObjectID!): Account @auth(requires: User)
  "Delete an account."
  deleteAccount(id: ObjectID!): Boolean @auth(requires: User)
  "Transfer an amount between two accounts."
  transferAmount(transferAmountPayload: TransferAmountPayload!): TransferAmountResponse @auth(requires: User)
}
