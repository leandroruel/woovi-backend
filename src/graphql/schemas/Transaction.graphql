"Represents the type of a transaction."
enum TransactionType {
 deposit,
 transfer,
 withdraw
}

"Represents the state of a transaction."
enum TransactionState {
  pending,
  done
}

"Represents a transaction between two users."
type Transaction {
  "The unique ID of the transaction."
  senderId: ObjectID!
  "The unique ID of the transaction."
  receiverId: ObjectID!
  "The unique ID of the transaction."
  idempotencyId: String!
  "The amount of the transaction."
  amount: Float!
  "The type of the transaction."
  type: TransactionType!
  "The state of the transaction."
  state: TransactionState!
  "The date of the transaction."
  createdAt: Date!
  "The description of the transaction."
  description: String!
}

"Represents the payload to create a transaction."
input CreateTransactionPayload {
  "The unique idempotency key."
  idempotencyId: String!
  "The sender ID."
  senderId: ObjectID!
  "The receiver ID."
  receiverId: ObjectID!
  "The value of the transaction."
  amount: Float!
  "The type of the transaction."
  type: TransactionType!
  "The state of the transaction."
  state: TransactionState!
  "The description of the transaction."
  description: String!
}

type Query {
  "Get a transaction by its ID."
  transaction(id: ID!): Transaction!
  "Get all transactions by a user ID."
  transactionByUserId(userId: ID!, offset: Int!, limit: Int!): [Transaction!]!
}

type Mutation {
  "Create a transaction record."
  createTransaction(payload: CreateTransactionPayload!): Transaction!
}
